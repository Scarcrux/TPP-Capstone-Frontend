{"ast":null,"code":"import * as actionTypes from '../constants/cartConstants';\nconst initialState = {\n  carts: []\n};\n\nconst cartReducers = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_TO_CART:\n      let newCarts = [...state.carts];\n\n      if (action.payload) {\n        let newItem = action.payload;\n        newItem.qty = action.qty;\n\n        if (newCarts.some(e => e._id == newItem._id)) {\n          newCarts.map(item => item._id == newItem._id ? newItem : item);\n        } else {\n          newCarts.push(newItem);\n        }\n      }\n\n      return { ...state,\n        carts: newCarts\n      };\n\n    case actionTypes.DELETE_FROM_CART:\n      return { ...state,\n        carts: state.carts.filter(x => x._id !== action.payload._id)\n      };\n\n    case actionTypes.CHANGE_QTY_IN_CART:\n      let item = action.payload;\n      item.qty = action.qty;\n      return { ...state,\n        carts: state.carts.map(e => e._id == item._id ? item : e)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducers;","map":{"version":3,"sources":["/Users/haitham/Desktop/Capstone/TTP-Capstone-Frontend/src/reducers/cartReducers.js"],"names":["actionTypes","initialState","carts","cartReducers","state","action","type","ADD_TO_CART","newCarts","payload","newItem","qty","some","e","_id","map","item","push","DELETE_FROM_CART","filter","x","CHANGE_QTY_IN_CART"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,4BAA7B;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAC;AADW,CAArB;;AAIA,MAAMC,YAAY,GAAG,CAAEC,KAAK,GAAGH,YAAV,EAAwBI,MAAxB,KAAoC;AACrD,UAASA,MAAM,CAACC,IAAhB;AACI,SAAKN,WAAW,CAACO,WAAjB;AACA,UAAIC,QAAQ,GAAC,CAAC,GAAGJ,KAAK,CAACF,KAAV,CAAb;;AACA,UAAGG,MAAM,CAACI,OAAV,EAAkB;AACd,YAAIC,OAAO,GAAGL,MAAM,CAACI,OAArB;AACAC,QAAAA,OAAO,CAACC,GAAR,GAAcN,MAAM,CAACM,GAArB;;AACA,YAAGH,QAAQ,CAACI,IAAT,CAAcC,CAAC,IAAIA,CAAC,CAACC,GAAF,IAASJ,OAAO,CAACI,GAApC,CAAH,EAA4C;AACxCN,UAAAA,QAAQ,CAACO,GAAT,CAAaC,IAAI,IAAIA,IAAI,CAACF,GAAL,IAAYJ,OAAO,CAACI,GAApB,GAA0BJ,OAA1B,GAAkCM,IAAvD;AACH,SAFD,MAEK;AACDR,UAAAA,QAAQ,CAACS,IAAT,CAAcP,OAAd;AACH;AACJ;;AACD,aAAO,EACH,GAAGN,KADA;AAEHF,QAAAA,KAAK,EAAEM;AAFJ,OAAP;;AAIA,SAAKR,WAAW,CAACkB,gBAAjB;AACI,aAAO,EACH,GAAGd,KADA;AAEHF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYiB,MAAZ,CAAmBC,CAAC,IAAIA,CAAC,CAACN,GAAF,KAAUT,MAAM,CAACI,OAAP,CAAeK,GAAjD;AAFJ,OAAP;;AAIJ,SAAKd,WAAW,CAACqB,kBAAjB;AACI,UAAIL,IAAI,GAAGX,MAAM,CAACI,OAAlB;AACAO,MAAAA,IAAI,CAACL,GAAL,GAAWN,MAAM,CAACM,GAAlB;AACA,aAAO,EACC,GAAGP,KADJ;AAECF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYa,GAAZ,CAAgBF,CAAC,IAAIA,CAAC,CAACC,GAAF,IAASE,IAAI,CAACF,GAAd,GAAoBE,IAApB,GAAyBH,CAA9C;AAFR,OAAP;;AAIJ;AACA,aAAOT,KAAP;AA7BJ;AAgCH,CAjCD;;AAmCA,eAAeD,YAAf","sourcesContent":["import * as actionTypes from '../constants/cartConstants';\nconst initialState = {\n    carts:[]\n};\n\nconst cartReducers = ( state = initialState, action ) => {\n    switch ( action.type ) {\n        case actionTypes.ADD_TO_CART:\n        let newCarts=[...state.carts];\n        if(action.payload){\n            let newItem = action.payload;\n            newItem.qty = action.qty;\n            if(newCarts.some(e => e._id == newItem._id)){\n                newCarts.map(item => item._id == newItem._id ? newItem:item);\n            }else{\n                newCarts.push(newItem);\n            }\n        }\n        return {\n            ...state,\n            carts: newCarts\n        }\n        case actionTypes.DELETE_FROM_CART:\n            return {\n                ...state,\n                carts: state.carts.filter(x => x._id !== action.payload._id)\n            }\n        case actionTypes.CHANGE_QTY_IN_CART:\n            let item = action.payload;\n            item.qty = action.qty;\n            return {\n                    ...state,\n                    carts: state.carts.map(e => e._id == item._id ? item:e)\n            }\n        default:\n        return state;\n        }\n\n};\n\nexport default cartReducers;\n"]},"metadata":{},"sourceType":"module"}